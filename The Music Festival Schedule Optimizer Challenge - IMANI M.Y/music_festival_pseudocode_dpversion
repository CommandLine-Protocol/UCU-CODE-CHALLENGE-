START

1. INPUT number of stages S, number of performances P, maximum stage changes K

2. INPUT S x S distance matrix between stages

3. FOR each performance i FROM 0 TO P-1
       INPUT stage, start time, end time, base satisfaction, growth rate
       ASSIGN performance ID = i

4. INPUT number of combos C
   FOR each combo
       INPUT performance1_id, performance2_id, bonus
       STORE bonus in combo_bonus matrix

5. INITIALIZE dp table:
       FOR each performance i FROM 0 TO P-1
           FOR each k FROM 0 TO K
               SET dp[i][k] = negative infinity
               SET parent_perf[i][k] = -1
               SET parent_k[i][k] = -1
               SET arrival_time[i][k] = -1

6. BASE CASE:
       FOR each performance i FROM 0 TO P-1
           CALCULATE duration = end - start
           CALCULATE satisfaction for full duration
           STORE satisfaction in dp[i][0]
           SET arrival_time[i][0] = start
           SET parent_perf[i][0] = -1
           SET parent_k[i][0] = -1

7. DP TRANSITIONS:
       FOR each performance i FROM 0 TO P-1
           FOR each k FROM 0 TO K
               IF dp[i][k] is negative infinity CONTINUE
               FOR each performance j FROM 0 TO P-1
                   IF i == j CONTINUE
                   CALCULATE walking time from stage i to stage j
                   CALCULATE arrival time at performance j
                   IF arrival time > performance j end time CONTINUE
                   CALCULATE stage change required
                   IF k + stage change > K CONTINUE
                   CALCULATE watch start time = max(arrival, performance j start)
                   CALCULATE watch duration = performance j end - watch start
                   IF watch duration <= 0 CONTINUE
                   CALCULATE satisfaction for performance j given arrival and duration
                   CALCULATE total satisfaction = dp[i][k] + satisfaction + combo bonus
                   IF total satisfaction > dp[j][k + stage change]
                       UPDATE dp[j][k + stage change] = total satisfaction
                       UPDATE parent_perf[j][k + stage change] = i
                       UPDATE parent_k[j][k + stage change] = k
                       UPDATE arrival_time[j][k + stage change] = watch start

8. FIND maximum satisfaction in dp table
       STORE performance ID and k value corresponding to maximum

9. RECONSTRUCT schedule:
       INITIALIZE empty schedule arrays
       START from performance with max satisfaction
       WHILE current performance exists
           ADD current performance, arrival, departure to schedule
           MOVE to parent performance using parent_perf and parent_k
       REVERSE schedule to correct order

10. OUTPUT maximum satisfaction
11. OUTPUT schedule with performance IDs and arrival-departure times

END
